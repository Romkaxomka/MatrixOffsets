#pragma kernel SolveMatrix4

uint modelsCount;
uint spacesCount;

RWStructuredBuffer<float4x4> modelMatrices;
RWStructuredBuffer<float4x4> spaceMatrices;

AppendStructuredBuffer<float4x4> offsetResults;

bool MatrixCompare(float4x4 a, float4x4 b)
{
    for (uint i = 0; i < 4; i++)
    {
        for (uint j = 0; j < 4; j++)
        {
            if (a[i][j] != b[i][j])
            {
                return false;
            }
        }
    }
    
    return true;
}

bool ContainsInSpace(float4x4 a)
{
    for (uint i = 0; i < spacesCount; i++)
    {
        if (MatrixCompare(a, spaceMatrices[i]))
        {
            return true;
        }
    }
    
    return false;
}

[numthreads(16, 16, 1)]
void SolveMatrix4(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= modelsCount || id.y >= spacesCount)
        return;
    
    float4x4 m = modelMatrices[id.x];
    
    float a00 = m._11, a01 = m._12, a02 = m._13, a03 = m._14;
    float a10 = m._21, a11 = m._22, a12 = m._23, a13 = m._24;
    float a20 = m._31, a21 = m._32, a22 = m._33, a23 = m._34;
    float a30 = m._41, a31 = m._42, a32 = m._43, a33 = m._44;

    float det = determinant(m);

    if (det == 0.0f)
        return;

    float invDet = 1.0 / det;

    float4x4 adj;
    adj._11 = (a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31));
    adj._12 = -(a01 * (a22 * a33 - a23 * a32) - a02 * (a21 * a33 - a23 * a31) + a03 * (a21 * a32 - a22 * a31));
    adj._13 = (a01 * (a12 * a33 - a13 * a32) - a02 * (a11 * a33 - a13 * a31) + a03 * (a11 * a32 - a12 * a31));
    adj._14 = -(a01 * (a12 * a23 - a13 * a22) - a02 * (a11 * a23 - a13 * a21) + a03 * (a11 * a22 - a12 * a21));

    adj._21 = -(a10 * (a22 * a33 - a23 * a32) - a12 * (a20 * a33 - a23 * a30) + a13 * (a20 * a32 - a22 * a30));
    adj._22 = (a00 * (a22 * a33 - a23 * a32) - a02 * (a20 * a33 - a23 * a30) + a03 * (a20 * a32 - a22 * a30));
    adj._23 = -(a00 * (a12 * a33 - a13 * a32) - a02 * (a10 * a33 - a13 * a30) + a03 * (a10 * a32 - a12 * a30));
    adj._24 = (a00 * (a12 * a23 - a13 * a22) - a02 * (a10 * a23 - a13 * a20) + a03 * (a10 * a22 - a12 * a20));

    adj._31 = (a10 * (a21 * a33 - a23 * a31) - a11 * (a20 * a33 - a23 * a30) + a13 * (a20 * a31 - a21 * a30));
    adj._32 = -(a00 * (a21 * a33 - a23 * a31) - a01 * (a20 * a33 - a23 * a30) + a03 * (a20 * a31 - a21 * a30));
    adj._33 = (a00 * (a11 * a33 - a13 * a31) - a01 * (a10 * a33 - a13 * a30) + a03 * (a10 * a31 - a11 * a30));
    adj._34 = -(a00 * (a11 * a23 - a13 * a21) - a01 * (a10 * a23 - a13 * a20) + a03 * (a10 * a21 - a11 * a20));

    adj._41 = -(a10 * (a21 * a32 - a22 * a31) - a11 * (a20 * a32 - a22 * a30) + a12 * (a20 * a31 - a21 * a30));
    adj._42 = (a00 * (a21 * a32 - a22 * a31) - a01 * (a20 * a32 - a22 * a30) + a02 * (a20 * a31 - a21 * a30));
    adj._43 = -(a00 * (a11 * a32 - a12 * a31) - a01 * (a10 * a32 - a12 * a30) + a02 * (a10 * a31 - a11 * a30));
    adj._44 = (a00 * (a11 * a22 - a12 * a21) - a01 * (a10 * a22 - a12 * a20) + a02 * (a10 * a21 - a11 * a20));
    
    float4x4 inversedModel = adj * invDet;
    float4x4 offsetMatrix = mul(spaceMatrices[id.y], inversedModel);
    
    bool isGood = true;
    
    for (uint j = 0; j < modelsCount; j++)
    {
        float4x4 transformed = mul(offsetMatrix, modelMatrices[j]);
            
        if (!ContainsInSpace(transformed))
        {
            isGood = false;
            break;
        }
    }
    
    if(isGood)
    {
        offsetResults.Append(offsetMatrix);
    }
}